{"version":3,"sources":["components/total.js","App.js","serviceWorker.js","index.js"],"names":["Total","props","react_default","a","createElement","className","total","App","state","products","id","name","cost","stock","currentItems","AddItem","index","_this","slice","indexOf","push","setState","decrementItem","selectedInd","splice","incrementItem","_this2","this","map","product","onClick","Fragment","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ad73844a.chunk.js","sourcesContent":["import React from 'react';\n\nconst Total = (props) =>{\n\treturn(\n\t\t<div className=\"total\">\n\t\t\t<h1>Total: ${props.total}</h1>\n\t\t</div>\n\t);\n}\n\nexport default Total;","import React, { Component } from 'react';\nimport './App.css';\nimport Products from './components/products';\nimport Total from './components/total';\nimport Cart from './components/cart';\n\nclass App extends Component {\n      state={\n      products: [\n\n        {id: 1, name: 'Brush', cost: 3, stock: 0},\n        {id: 2, name: 'Shirt', cost: 25, stock: 0},\n        {id: 3, name: 'Socks', cost: 1, stock: 0},\n        {id: 4, name: 'Shoes', cost: 60, stock: 0},\n        {id: 5, name: 'Hammer', cost: 2, stock: 0}\n      ],\n      total: 0,\n      currentItems: []\n    }\n\n    AddItem = (index) =>{\n      const total = this.state.total + this.state.products[index].cost;\n      const currentItems = this.state.currentItems.slice();\n      this.state.products[index].stock++;\n      if(currentItems.indexOf(this.state.products[index]) === -1){\n        currentItems.push(this.state.products[index]);\n      }\n      this.setState({\n        total: total,\n        currentItems: currentItems\n      })        \n      }\n\n      decrementItem = (index) =>{\n      const selectedInd = this.state.currentItems[index];\n      const total = this.state.total - selectedInd.cost;\n      this.state.currentItems[index].stock--;\n      const currentItems = this.state.currentItems.slice();\n      if(this.state.currentItems[index].stock < 1){\n        currentItems.splice(index,1);\n      }\n      this.setState({\n        total: total,\n        currentItems: currentItems\n      })        \n      }\n\n      incrementItem = (index) => {\n      const selectedInd = this.state.currentItems[index];\n      const total = this.state.total + selectedInd.cost;\n      this.state.currentItems[index].stock++;\n      this.setState({\n        total: total,\n\n      })  \n      }\n    \n\n  render() {\n       let products = (this.state.products.map((product, index) => {\n        return  <div className=\"products\">\n                <div className=\"prouduct\">{this.state.products[index].name}</div>\n                <div className=\"price\">${this.state.products[index].cost}</div>\n                <button onClick={() =>this.AddItem(index)}>Add to Cart</button>\n              </div>\n      }) )\n\n       let currentItems = \n\n       (this.state.currentItems.map((product, index) => {\n               return <React.Fragment>\n                      <div className=\"theItems\">\n                        <button onClick={() =>this.decrementItem(index)} className=\"currentItems\">-</button>\n                        <div className=\"currentItems\">{this.state.currentItems[index].name}</div>\n                        <div className=\"currentItems\">${this.state.currentItems[index].cost}</div>\n                        <div className=\"currentItems\">x{this.state.currentItems[index].stock}</div>\n                        <button onClick={() =>this.incrementItem(index)}className=\"currentItems\">+</button>\n                      </div>\n                     </React.Fragment>\n              }) )\n       \n\n\n    return (\n\n\n      <div className=\"App\">\n      <Total total={this.state.total} />\n       <center>{products}</center>\n       <div className=\"cart\">\n        <center><h3>Your Current Items</h3>\n        {currentItems.length > 0 ? currentItems : 'No Current Items'}</center>\n       </div>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}